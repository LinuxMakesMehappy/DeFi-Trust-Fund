name: Security Scan

on:
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:  # Manual trigger
  push:
    paths:
      - 'Cargo.toml'
      - 'package.json'
      - 'Cargo.lock'
      - 'package-lock.json'
      - 'yarn.lock'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.70.0
        components: rustfmt, clippy
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
    
    - name: Rust Security Audit
      run: |
        cargo audit --version || echo "Installing cargo-audit..."
        cargo install cargo-audit
        cargo audit --deny warnings
    
    - name: Node.js Security Audit
      run: |
        npm audit --audit-level=moderate --json > audit-report.json || true
        npm audit --audit-level=moderate
    
    - name: Check for outdated dependencies
      run: |
        echo "=== Rust Dependencies ==="
        cargo outdated || echo "No outdated Rust dependencies"
        echo "=== Node.js Dependencies ==="
        npm outdated || echo "No outdated Node.js dependencies"
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-report
        path: audit-report.json
        retention-days: 7

  code-scan:
    runs-on: ubuntu-latest
    name: Code Security Analysis
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.70.0
        components: rustfmt, clippy
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
    
    - name: Secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: HEAD~10
        extra_args: --only-verified
    
    - name: Rust security analysis
      run: |
        # Run clippy with security-focused lints
        cargo clippy --all-targets --all-features -- -D warnings -A clippy::all
        
        # Check for unsafe code
        echo "Checking for unsafe code blocks..."
        find src -name "*.rs" -exec grep -l "unsafe" {} \; || echo "No unsafe blocks found"
    
    - name: TypeScript security analysis
      run: |
        # Run ESLint with security rules
        npx eslint frontend/src --ext .ts,.tsx --max-warnings 0 || echo "ESLint completed with warnings"
        
        # Check for potential security issues
        echo "Checking for potential security issues in TypeScript..."
        grep -r "eval\|innerHTML\|dangerouslySetInnerHTML" frontend/src || echo "No obvious security issues found"

  smart-contract-security:
    runs-on: ubuntu-latest
    name: Smart Contract Security Analysis
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.70.0
        components: rustfmt, clippy
    
    - name: Setup Solana
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.16.0/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Anchor
      run: |
        npm install -g @coral-xyz/anchor-cli@0.29.0
    
    - name: Install dependencies
      run: |
        npm install
    
    - name: Build for analysis
      run: |
        cargo clean
        anchor build
    
    - name: Run security tests
      run: |
        npm run test:security
    
    - name: Run fuzzing tests
      run: |
        # Check if fuzz directory exists and run fuzzing tests
        if [ -d "fuzz" ]; then
          echo "Running fuzzing tests..."
          cd fuzz
          
          # Build fuzzing targets
          cargo build --release || echo "Fuzzing build failed"
          
          # Run quick fuzzing tests (limited time for CI)
          echo "Running deposit fuzzing test..."
          timeout 60s cargo run --release --bin fuzz_deposit || echo "Deposit fuzzing test failed or timed out"
          
          echo "Running governance fuzzing test..."
          timeout 60s cargo run --release --bin fuzz_governance || echo "Governance fuzzing test failed or timed out"
          
          cd ..
        else
          echo "Fuzz directory not found, skipping fuzzing tests"
        fi
    
    - name: Static analysis
      run: |
        echo "Performing static analysis on smart contract..."
        # Check for common Solana/Anchor security patterns
        echo "Checking for floating-point arithmetic..."
        grep -r "as f64\|as f32" src/ || echo "No floating-point arithmetic found"
        
        echo "Checking for unchecked arithmetic..."
        grep -r "\.checked_" src/ || echo "No checked arithmetic found"
        
        echo "Checking for proper error handling..."
        grep -r "\.ok_or(" src/ || echo "No ok_or error handling found"

  report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, smart-contract-security]
    if: always()
    name: Generate Security Report
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-report.md
        echo "- Smart Contract Scan: ${{ needs.smart-contract-security.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Recommendations" >> security-report.md
        echo "1. Review any failed scans immediately" >> security-report.md
        echo "2. Update dependencies with known vulnerabilities" >> security-report.md
        echo "3. Address any code security issues found" >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
