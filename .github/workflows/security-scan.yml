name: Security & Pentesting Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: Static Analysis & Code Quality
  static-analysis:
    name: Static Analysis & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust dependencies
        run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
          cargo install cargo-tarpaulin

      - name: Run Clippy (Rust linter)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rustfmt check
        run: cargo fmt --all -- --check

      - name: Run Cargo audit
        run: cargo audit

      - name: Run Tarpaulin (Code coverage)
        run: cargo tarpaulin --out Html --output-dir coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/tarpaulin-report.html
          flags: unittests
          name: codecov-umbrella

  # Job 2: Smart Contract Security Analysis
  smart-contract-security:
    name: Smart Contract Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Solana
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.16.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Setup Anchor
        run: |
          npm install -g @coral-xyz/anchor-cli
          anchor --version

      - name: Install security tools
        run: |
          npm install -g solhint
          npm install -g slither-analyzer
          cargo install cargo-dylint

      - name: Run Solhint (Solana linting)
        run: |
          if [ -f "solhint.config.js" ]; then
            solhint '**/*.sol'
          fi

      - name: Run Anchor build
        run: anchor build

      - name: Run Anchor test with security checks
        run: |
          anchor test --skip-lint
          # Additional security-focused tests
          anchor test --skip-lint -- --nocapture --test-threads=1

      - name: Security audit with cargo-dylint
        run: cargo dylint --all

  # Job 3: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install npm audit
        run: npm install -g npm-audit

      - name: Scan npm dependencies
        run: |
          if [ -f "package.json" ]; then
            npm audit --audit-level=moderate
          fi
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm audit --audit-level=moderate
          fi

      - name: Scan Rust dependencies
        run: cargo audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 4: Automated Penetration Testing
  penetration-testing:
    name: Automated Penetration Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit
          pip install safety
          pip install semgrep
          npm install -g eslint-plugin-security

      - name: Run Bandit (Python security linter)
        run: |
          find . -name "*.py" -exec bandit -r {} \;

      - name: Run Safety (Python dependency checker)
        run: safety check

      - name: Run Semgrep (Semantic grep for security)
        run: |
          semgrep --config=auto --json --output=semgrep-results.json .

      - name: Run ESLint security plugin
        run: |
          if [ -f "package.json" ]; then
            npx eslint . --ext .js,.jsx,.ts,.tsx --plugin security
          fi

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-results
          path: semgrep-results.json

  # Job 5: Smart Contract Fuzzing
  fuzzing:
    name: Smart Contract Fuzzing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install fuzzing tools
        run: |
          cargo install cargo-fuzz
          cargo install afl

      - name: Run cargo-fuzz
        run: |
          cd fuzz
          cargo fuzz build
          cargo fuzz run deposit -- -max_total_time=300

      - name: Run AFL fuzzing
        run: |
          if [ -d "fuzz/afl" ]; then
            cd fuzz/afl
            afl-fuzz -i input -o output ./target/debug/fuzz_deposit
          fi

  # Job 6: Performance & Stress Testing
  performance-testing:
    name: Performance & Stress Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Solana
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.16.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Setup Anchor
        run: npm install -g @coral-xyz/anchor-cli

      - name: Run performance tests
        run: |
          # Start local validator
          solana-test-validator &
          sleep 10
          
          # Deploy and run stress tests
          anchor deploy
          anchor test --skip-lint -- --nocapture --test-threads=1

      - name: Run load testing
        run: |
          # Simulate high load scenarios
          for i in {1..10}; do
            anchor test --skip-lint -- --nocapture &
          done
          wait

  # Job 7: Compliance & Regulatory Checks
  compliance:
    name: Compliance & Regulatory Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check license compliance
        run: |
          # Check for proper licensing
          find . -name "*.rs" -o -name "*.ts" -o -name "*.js" | head -10 | xargs grep -L "Copyright\|License" || true

      - name: Check for hardcoded secrets
        run: |
          # Scan for potential secrets
          grep -r -i "password\|secret\|key\|token" . --exclude-dir=node_modules --exclude-dir=target || true

      - name: Check for PII
        run: |
          # Scan for potential PII
          grep -r -i "email\|phone\|address\|ssn" . --exclude-dir=node_modules --exclude-dir=target || true

  # Job 8: Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [static-analysis, smart-contract-security, dependency-scan, penetration-testing, fuzzing, performance-testing, compliance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report - $(date)" > security-report.md
          echo "## Summary" >> security-report.md
          echo "- Static Analysis: âœ…" >> security-report.md
          echo "- Smart Contract Security: âœ…" >> security-report.md
          echo "- Dependency Scan: âœ…" >> security-report.md
          echo "- Penetration Testing: âœ…" >> security-report.md
          echo "- Fuzzing: âœ…" >> security-report.md
          echo "- Performance Testing: âœ…" >> security-report.md
          echo "- Compliance: âœ…" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });
